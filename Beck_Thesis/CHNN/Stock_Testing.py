
# %%
from scipy import stats

# %%
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import yfinance as yf

# %%
data = np.linspace(-2, 2, 100)

def gumbel_kde(u, gamma):
    return np.exp((-(1-np.exp(-u**2)) ** gamma) * (u **2))

plt.plot(gumbel_kde(data, gamma=1), label = 'Gamma = 1' )
plt.plot(gumbel_kde(data, gamma=1.1), label = 'Gamma = 1.1' )
plt.plot(gumbel_kde(data, gamma=1.5), label = 'Gamma = 1.5' )
plt.plot(gumbel_kde(data, gamma=2), label = 'Gamma = 2' )
plt.legend()

plt.show()

# %%

#define the ticker symbol
tickerSymbol = 'MSFT'

# Take in a given stock ticker symbol
# Get the daily close of the stock from Yahoo Finance from the start of 2008 until today
stockData = {}
def get_stock_data(tickerSymbol):
    tickerData = yf.download(tickerSymbol, start="2003-09-01", end="2017-12-29")
    
    if tickerData.empty:
        print("No data found for ticker: %s" % tickerSymbol)
        return None
    return tickerData['Close']

for tckr in tickers:
    tmp = get_stock_data(tckr)
    if tmp:
        stockData[tckr] = tmp
# %%
stockData2 = {k:v for k,v in stockData.items() if not v.empty}
# %%
# def get_stock_data(tickerSymbol):
    
#     #get data on this ticker
#     tickerData = yf.Ticker(tickerSymbol)

#     #get the historical prices for this ticker
#     tickerDf = tickerData.history(period='1d', start='2003-9-1', end='2017-12-29')

#     #see your data
#     tickerDf

# %%
tickers = ['A',
'AA',
'AAC',
'AAC.U',
'AAC.W',
'AAI-B',
'AAI-C',
'AAIC',
'AAIN',
'AAM-A',
'AAM-B',
'AAN',
'AAP',
'AAQ.U',
'AAQ.W',
'AAQC',
'AAT',
'AB',
'ABB',
'ABBV',
'ABC',
'ABEV',
'ABG',
'ABM',
'ABR',
'ABR-D',
'ABR-E',
'ABR-F',
'ABT',
'AC',
'ACA',
'ACA.U',
'ACA.W',
'ACAQ',
'ACC',
'ACCO',
'ACD.U',
'ACD.W',
'ACDI',
'ACEL',
'ACH',
'ACH.W',
'ACHR',
'ACI',
'ACI.S',
'ACI.T',
'ACII',
'ACM',
'ACN',
'ACP',
'ACP-A',
'ACR',
'ACR-C',
'ACR-D',
'ACR.U',
'ACR.W',
'ACRE',
'ACRO',
'ACV',
'ADC',
'ADC-A',
'ADCT',
'ADE.U',
'ADE.W',
'ADEX',
'ADM',
'ADNT',
'ADT',
'ADX',
'AEE',
'AEFC',
'AEG',
'AEL',
'AEL-A',
'AEL-B',
'AEM',
'AENZ',
'AEO',
'AER',
'AES',
'AESC',
'AEV.W',
'AEVA',
'AFB',
'AFG',
'AFGB',
'AFGC',
'AFGD',
'AFGE',
'AFI',
'AFL',
'AFT',
'AFT.U',
'AFT.W',
'AFTR',
'AG',
'AGA.U',
'AGA.W',
'AGAC',
'AGCB',
'AGCO',
'AGD',
'AGI',
'AGL',
'AGM',
'AGM-C',
'AGM-D',
'AGM-E',
'AGM-F',
'AGM-G',
'AGM.A',
'AGO',
'AGR',
'AGRO',
'AGS',
'AGTI',
'AGX',
'AHH',
'AHH-A',
'AHL-C',
'AHL-D',
'AHL-E',
'AHT',
'AHT-D',
'AHT-F',
'AHT-G',
'AHT-H',
'AHT-I',
'AI',
'AIC',
'AIF',
'AIG',
'AIG-A',
'AIN',
'AIO',
'AIR',
'AIRC',
'AIT',
'AIU',
'AIV',
'AIZ',
'AIZN',
'AJG',
'AJRD',
'AJX',
'AJXA',
'AKA',
'AKO.A',
'AKO.B',
'AKR',
'AL',
'AL-A',
'ALB',
'ALC',
'ALCC',
'ALE',
'ALEX',
'ALG',
'ALI-A',
'ALI-B',
'ALI-E',
'ALIT',
'ALK',
'ALL',
'ALL-B',
'ALL-G',
'ALL-H',
'ALL-I',
'ALL.W',
'ALLE',
'ALLG',
'ALLY',
'ALP-Q',
'ALSN',
'ALT-A',
'ALTG',
'ALV',
'ALX',
'AM',
'AMAM',
'AMB.W',
'AMBC',
'AMBP',
'AMC',
'AMCR',
'AME',
'AMG',
'AMH',
'AMH-G',
'AMH-H',
'AMK',
'AMN',
'AMOV',
'AMP',
'AMP.T',
'AMP.U',
'AMP.W',
'AMPI',
'AMPS',
'AMPY',
'AMR',
'AMRC',
'AMRX',
'AMT',
'AMTD',
'AMWL',
'AMX',
'AN',
'ANA.U',
'ANA.W',
'ANAC',
'ANET',
'ANF',
'ANTM',
'ANVS',
'AOD',
'AOMR',
'AON',
'AORT',
'AOS',
'AP',
'APAM',
'APC.U',
'APC.W',
'APCA',
'APD',
'APG',
'APG.U',
'APG.W',
'APGB',
'APH',
'APLE',
'APN',
'APN.U',
'APN.W',
'APO',
'APRN',
'APS.U',
'APS.W',
'APSG',
'APT-A',
'APTS',
'APTV',
'AQN',
'AQNA',
'AQNB',
'AQNU',
'AQUA',
'AR',
'ARC',
'ARCH',
'ARCO',
'ARDC',
'ARE',
'ARES',
'ARG-A',
'ARGD',
'ARGO',
'ARI',
'ARIS',
'ARL',
'ARLO',
'ARMK',
'ARNC',
'AROC',
'ARR',
'ARR-C',
'ARW',
'ASA',
'ASA.U',
'ASA.W',
'ASAI',
'ASAN',
'ASAQ',
'ASB',
'ASB-E',
'ASB-F',
'ASC',
'ASG',
'ASGI',
'ASGN',
'ASH',
'ASIX',
'ASPN',
'ASR',
'ASX',
'ASZ',
'ASZ.U',
'ASZ.W',
'ATA',
'ATA.D',
'ATA.U',
'ATA.V',
'ATA.W',
'ATAQ',
'ATC',
'ATC-D',
'ATC-H',
'ATC-I',
'ATCO',
'ATE.U',
'ATE.W',
'ATEK',
'ATEN',
'ATGE',
'ATH-A',
'ATH-B',
'ATH-C',
'ATH-D',
'ATHM',
'ATI',
'ATI.W',
'ATIP',
'ATKR',
'ATO',
'ATR',
'ATTO',
'ATUS',
'AU',
'AUD',
'AUS',
'AUS.U',
'AUS.W',
'AUY',
'AVA',
'AVA.U',
'AVA.W',
'AVAL',
'AVAN',
'AVB',
'AVD',
'AVK',
'AVLR',
'AVNS',
'AVNT',
'AVT-A',
'AVTR',
'AVY',
'AVYA',
'AWF',
'AWI',
'AWK',
'AWP',
'AWR',
'AX',
'AXA.P',
'AXA.W',
'AXAC',
'AXH',
'AXH.U',
'AXH.W',
'AXL',
'AXP',
'AXR',
'AXS',
'AXS-E',
'AXTA',
'AYI',
'AYX',
'AZEK',
'AZO',
'AZRE',
'AZUL',
'AZZ']
# %%
ann_model = Sequential()
ann_model.add(layers.Dense(15, activation='relu', input_dim=ann_train_X.shape[1]))
ann_model.add(layers.Dense(10, activation='relu'))
# model.add(layers.Dense(5, activation='tanh'))
ann_model.add(layers.Dense(1))


# %%
import scipy.stats as ss

# for tckr, data in stockData2.items():
#     data = np.array(data)
#     # Perform Z-score normalization
#     data_transformed = ss.zscore(data)
    
tckr,data = 'APLE', stockData2['APLE']

data = np.array(data)
# Perform Z-score normalization
data_transformed = ss.zscore(data)
train = data_transformed[:400]
val

# %%
